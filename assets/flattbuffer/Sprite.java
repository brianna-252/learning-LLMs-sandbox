// automatically generated by the FlatBuffers compiler, do not modify

package assets.flattbuffer;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Sprite extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Sprite getRootAsSprite(ByteBuffer _bb) { return getRootAsSprite(_bb, new Sprite()); }
  public static Sprite getRootAsSprite(ByteBuffer _bb, Sprite obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Sprite __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Position position() { return position(new Position()); }
  public Position position(Position obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public Position maskPosition() { return maskPosition(new Position()); }
  public Position maskPosition(Position obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int padding() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int index() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Color mostCommonColor() { return mostCommonColor(new Color()); }
  public Color mostCommonColor(Color obj) { int o = __offset(12); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public boolean isT() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String spriteSheetName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer spriteSheetNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer spriteSheetNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public long aId() { int o = __offset(18); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static void startSprite(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addStruct(0, positionOffset, 0); }
  public static void addMaskPosition(FlatBufferBuilder builder, int maskPositionOffset) { builder.addStruct(1, maskPositionOffset, 0); }
  public static void addPadding(FlatBufferBuilder builder, int padding) { builder.addInt(2, padding, 0); }
  public static void addIndex(FlatBufferBuilder builder, int index) { builder.addInt(3, index, 0); }
  public static void addMostCommonColor(FlatBufferBuilder builder, int mostCommonColorOffset) { builder.addStruct(4, mostCommonColorOffset, 0); }
  public static void addIsT(FlatBufferBuilder builder, boolean isT) { builder.addBoolean(5, isT, false); }
  public static void addSpriteSheetName(FlatBufferBuilder builder, int spriteSheetNameOffset) { builder.addOffset(6, spriteSheetNameOffset, 0); }
  public static void addAId(FlatBufferBuilder builder, long aId) { builder.addLong(7, aId, 0L); }
  public static int endSprite(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Sprite get(int j) { return get(new Sprite(), j); }
    public Sprite get(Sprite obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

